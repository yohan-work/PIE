name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # 코드 품질 검사
  quality-check:
    name: 📋 Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 HTML Lint
        run: npx htmlhint **/*.html
        continue-on-error: true

      - name: 🎨 CSS Lint
        run: npx stylelint **/*.css --config .stylelintrc.json
        continue-on-error: true

      - name: ✨ Format Check
        run: npx prettier --check **/*.{html,css,js,json}
        continue-on-error: true

  # 접근성 테스트
  accessibility-test:
    name: ♿ Accessibility Test
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🌐 Start server
        run: |
          npm run serve &
          sleep 5
          curl -f http://localhost:3000 || exit 1

      - name: ♿ Run Pa11y accessibility test
        run: |
          # 메인 페이지 테스트
          npx pa11y http://localhost:3000 \
            --reporter json \
            --timeout 10000 \
            --wait 2000 \
            --chromium-flags="--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage" > pa11y-report-index.json

          # About 페이지 테스트
          npx pa11y http://localhost:3000/about.html \
            --reporter json \
            --timeout 10000 \
            --wait 2000 \
            --chromium-flags="--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage" > pa11y-report-about.json

          # 리포트 합치기
          echo "[]" | jq '. + input + input' pa11y-report-index.json pa11y-report-about.json > pa11y-report.json
        continue-on-error: false

      - name: 🔬 Run axe-core accessibility test
        run: |
          # 메인 페이지 테스트
          npx @axe-core/cli http://localhost:3000 \
            --output axe-report-index.json \
            --format json

          # About 페이지 테스트  
          npx @axe-core/cli http://localhost:3000/about.html \
            --output axe-report-about.json \
            --format json

          # 메인 페이지 결과를 기본으로 사용 (about 결과는 별도 확인)
          cp axe-report-index.json axe-report.json
        continue-on-error: false

      - name: 📊 Generate accessibility summary
        run: |
          node -e "
            const fs = require('fs');
            
            // Pa11y 리포트 처리
            let pa11yReport = {};
            if (fs.existsSync('pa11y-report.json')) {
              try {
                pa11yReport = JSON.parse(fs.readFileSync('pa11y-report.json', 'utf8'));
              } catch (e) {
                console.log('Pa11y 리포트 파싱 실패:', e.message);
              }
            }

            // Axe 리포트 처리  
            let axeReport = {};
            if (fs.existsSync('axe-report.json')) {
              try {
                axeReport = JSON.parse(fs.readFileSync('axe-report.json', 'utf8'));
              } catch (e) {
                console.log('Axe 리포트 파싱 실패:', e.message);
              }
            }

            const summary = {
              timestamp: new Date().toISOString(),
              pa11y: {
                issues: Array.isArray(pa11yReport) ? pa11yReport.length : 0,
                details: pa11yReport
              },
              axe: {
                violations: axeReport.violations ? axeReport.violations.length : 0,
                passes: axeReport.passes ? axeReport.passes.length : 0,
                details: axeReport
              }
            };

            fs.writeFileSync('accessibility-summary.json', JSON.stringify(summary, null, 2));
            console.log('접근성 테스트 완료:');
            console.log('- Pa11y 이슈:', summary.pa11y.issues);
            console.log('- Axe 위반사항:', summary.axe.violations);
            console.log('- Axe 통과항목:', summary.axe.passes);
          "

      - name: 📤 Upload accessibility reports
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-reports
          path: |
            pa11y-report.json
            axe-report.json
            accessibility-summary.json
          retention-days: 30

  # 스냅샷 테스트
  visual-test:
    name: 📸 Visual Regression Test
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🌐 Start server for testing
        run: |
          npm run serve &
          sleep 5
          curl -f http://localhost:3000 || exit 1

      - name: 📸 Run Playwright visual tests
        run: npx playwright test
        continue-on-error: true

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # 성능 테스트
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🌐 Start server
        run: |
          npm run serve &
          sleep 5

      - name: 🚀 Run Lighthouse CI
        run: |
          npx lighthouse http://localhost:3000 \
            --output json \
            --output-path lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox"

      - name: 📊 Performance summary
        run: |
          node -e "
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('lighthouse-report.json', 'utf8'));
            const categories = report.categories;
            
            console.log('📊 Lighthouse 성능 점수:');
            console.log('- 성능:', Math.round(categories.performance.score * 100));
            console.log('- 접근성:', Math.round(categories.accessibility.score * 100));
            console.log('- 모범사례:', Math.round(categories['best-practices'].score * 100));
            console.log('- SEO:', Math.round(categories.seo.score * 100));
          "

      - name: 📤 Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse-report.json
          retention-days: 30

  # 미리보기 배포 (PR용)
  deploy-preview:
    name: 🌐 Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [accessibility-test, visual-test, performance-test]

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build
        run: npm run build

      - name: 🚀 Deploy to Vercel (Preview)
        id: vercel-deploy
        run: |
          npx vercel --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --confirm dist > deployment-url.txt
          echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        continue-on-error: true

      - name: 📝 Comment PR with preview URL
        uses: actions/github-script@v7
        if: steps.vercel-deploy.outcome == 'success'
        with:
          script: |
            const deploymentUrl = '${{ steps.vercel-deploy.outputs.url }}';

            const comment = `## 🚀 미리보기 배포 완료

            **배포 URL**: ${deploymentUrl}

            ### 📊 테스트 결과
            - ✅ 코드 품질 검사 완료
            - ♿ 접근성 테스트 실행됨
            - 📸 스냅샷 테스트 실행됨  
            - ⚡ 성능 테스트 실행됨

            자세한 결과는 Actions 탭에서 확인하세요.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # 프로덕션 배포 (main 브랜치)
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [accessibility-test, visual-test, performance-test]
    environment: production

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build
        run: npm run build

      - name: 🚀 Deploy to Vercel (Production)
        run: |
          npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --confirm dist
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        continue-on-error: true

  # 종합 리포트 생성
  generate-report:
    name: 📋 Generate Comprehensive Report
    runs-on: ubuntu-latest
    if: always()
    needs: [accessibility-test, visual-test, performance-test]

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📊 Generate comprehensive report
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            const report = {
              timestamp: new Date().toISOString(),
              commit: process.env.GITHUB_SHA,
              branch: process.env.GITHUB_REF_NAME,
              workflow: process.env.GITHUB_WORKFLOW,
              results: {}
            };
            
            // 접근성 리포트 수집
            const a11yPath = './artifacts/accessibility-reports';
            if (fs.existsSync(a11yPath)) {
              try {
                const summaryPath = path.join(a11yPath, 'accessibility-summary.json');
                if (fs.existsSync(summaryPath)) {
                  report.results.accessibility = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
                }
              } catch (e) {
                console.log('접근성 리포트 처리 실패:', e.message);
              }
            }
            
            // Lighthouse 리포트 수집
            const lighthousePath = './artifacts/lighthouse-report';
            if (fs.existsSync(lighthousePath)) {
              try {
                const lighthouseFile = path.join(lighthousePath, 'lighthouse-report.json');
                if (fs.existsSync(lighthouseFile)) {
                  const lighthouse = JSON.parse(fs.readFileSync(lighthouseFile, 'utf8'));
                  report.results.performance = {
                    performance: Math.round(lighthouse.categories.performance.score * 100),
                    accessibility: Math.round(lighthouse.categories.accessibility.score * 100),
                    bestPractices: Math.round(lighthouse.categories['best-practices'].score * 100),
                    seo: Math.round(lighthouse.categories.seo.score * 100)
                  };
                }
              } catch (e) {
                console.log('Lighthouse 리포트 처리 실패:', e.message);
              }
            }
            
            fs.writeFileSync('comprehensive-report.json', JSON.stringify(report, null, 2));
            
            console.log('📊 종합 테스트 리포트');
            console.log('='.repeat(40));
            console.log('🕒 시간:', report.timestamp);
            console.log('🔗 커밋:', report.commit?.substring(0, 8));
            console.log('🌿 브랜치:', report.branch);
            
            if (report.results.accessibility) {
              console.log('♿ 접근성:');
              console.log('  - Pa11y 이슈:', report.results.accessibility.pa11y.issues);
              console.log('  - Axe 위반사항:', report.results.accessibility.axe.violations);
            }
            
            if (report.results.performance) {
              console.log('⚡ 성능:');
              console.log('  - 성능 점수:', report.results.performance.performance);
              console.log('  - 접근성 점수:', report.results.performance.accessibility);
              console.log('  - 모범사례:', report.results.performance.bestPractices);
              console.log('  - SEO:', report.results.performance.seo);
            }
          "
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_WORKFLOW: ${{ github.workflow }}

      - name: 📤 Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-report
          path: comprehensive-report.json
          retention-days: 90
